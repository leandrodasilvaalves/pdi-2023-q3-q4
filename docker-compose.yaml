version: '3.4'

networks:
  pdi.bacen:
    driver: bridge
  pdi.vulture:
    driver: bridge
  pdi.star:
    driver: bridge
  pdi.infra:
    driver: bridge

volumes:
  zookeeper-data:
    driver: local
  zookeeper-log:
    driver: local

services:
  bacen:
    image: ${PROJECT_NAMESPACE}.bc
    container_name: ${PROJECT_NAME}.bacen
    build:
      context: ./src
      dockerfile: Bacen/Dockerfile
    depends_on:
      mongo:
        condition: service_healthy        
      kafka:
        condition: service_healthy
    ports:
      - 5293:80
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNET_ENV}
      - Kafka__Configuration__BootstrapServers=${KAFKA_BOOTSTRAP}    
    networks:
      - pdi.bacen
    cpus: 0.25
    mem_limit: 256M
    healthcheck:
      test: curl --insecure --fail --location 'http://localhost/hc' || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  vulture:
    image: ${PROJECT_NAMESPACE}.vulture
    container_name: ${PROJECT_NAME}.vulture
    build:
      context: ./src
      dockerfile: Vulture/Dockerfile
    depends_on:
      mongo:
        condition: service_healthy        
      kafka:
        condition: service_healthy
    ports:
      - 6302:80
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNET_ENV}
      - Kafka__Configuration__BootstrapServers=${KAFKA_BOOTSTRAP}
    networks:
      - pdi.vulture
      - pdi.bacen
    cpus: 0.25
    mem_limit: 256M
    healthcheck:
      test: curl --insecure --fail --location 'http://localhost/hc' || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s

  star-accounts:
    image: ${PROJECT_NAMESPACE}.star.accounts
    container_name: ${PROJECT_NAME}.star.accounts
    build:
      context: ./src/
      dockerfile: Star/Star.Accounts/Dockerfile
    depends_on:
      mongo:
        condition: service_healthy        
      kafka:
        condition: service_healthy
    ports:
      - 6404:80
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNET_ENV}
      - Kafka__Configuration__BootstrapServers=${KAFKA_BOOTSTRAP}
    networks:
      - pdi.star
      - pdi.bacen
    cpus: 0.25
    mem_limit: 256M
    healthcheck:
      test: curl --insecure --fail --location 'http://localhost/hc' || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  star-entries:
    image: ${PROJECT_NAMESPACE}.star.entries
    container_name: ${PROJECT_NAME}.star.entries
    build:
      context: ./src/
      dockerfile: Star/Star.Entries/Dockerfile
    depends_on:
      mongo:
        condition: service_healthy        
      kafka:
        condition: service_healthy
    ports:
      - 6405:80
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNET_ENV}
      - Kafka__Configuration__BootstrapServers=${KAFKA_BOOTSTRAP}
    networks:
      - pdi.star
      - pdi.bacen
    cpus: 0.25
    mem_limit: 256M
    healthcheck:
      test: curl --insecure --fail --location 'http://localhost/hc' || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  star-claims:
    image: ${PROJECT_NAMESPACE}.star.claims
    container_name: ${PROJECT_NAME}.star.claims
    build:
      context: ./src/
      dockerfile: Star/Star.Claims/Dockerfile
    depends_on:
      mongo:
        condition: service_healthy        
      kafka:
        condition: service_healthy
    ports:
      - 6406:80
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNET_ENV}
      - Kafka__Configuration__BootstrapServers=${KAFKA_BOOTSTRAP}
    networks:
      - pdi.star
      - pdi.bacen
    cpus: 0.25
    mem_limit: 256M
    healthcheck:
      test: curl --insecure --fail --location 'http://localhost/hc' || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s

  mongo:
    image: mongo
    container_name: ${PROJECT_NAME}.mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - 27017:27017
    networks:
      - pdi.bacen
      - pdi.vulture
      - pdi.star
      - pdi.infra
    cpus: 0.5
    mem_limit: 256M
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - ./scripts/clean-mongo.sh:/scripts/clean-mongo.sh
      

  mongo-express:
    image: mongo-express
    container_name: ${PROJECT_NAME}.mongo-express
    depends_on:
      mongo:
        condition: service_healthy
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_URL=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017
    networks:
      - pdi.infra
    cpus: 0.25
    mem_limit: 256M

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - pdi.infra
    cpus: 0.5
    mem_limit: 512M
    scale: 2
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - zookeeper-data:/var/lib/zookeeper
      - zookeeper-log:/var/log/zookeeper

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ${PROJECT_NAME}.Kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
        - "2181:2181"
        - "9092:9092"
    environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_BOOTSTRAP},PLAINTEXT_HOST://localhost:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - pdi.bacen
      - pdi.vulture
      - pdi.star
      - pdi.infra
    cpus: 0.5   
    mem_limit: 512M
    healthcheck:
      test: ["CMD-SHELL", "/scripts/hc-kafka.sh"]
      interval: 15s
      timeout: 30s
      retries: 5
      start_period: 30s
    volumes:
      - ./scripts/hc-kafka.sh:/scripts/hc-kafka.sh

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ${PROJECT_NAME}.kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL=PLAINTEXT
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    ports:
        - 8082:8080
    networks:
      - pdi.infra
    cpus: 0.5
    mem_limit: 256M

  init-kafka:
    image: confluentinc/cp-zookeeper:latest
    container_name: ${PROJECT_NAME}.init-kafka
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    networks:
      - pdi.infra
    cpus: 0.5
    mem_limit: 256M
    command: |
      "
      # blocks until kafka is reachable

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic bacen.entries --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic bacen.claims --replication-factor 1 --partitions 1
      
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic vulture.entries --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic vulture.claims --replication-factor 1 --partitions 1
      
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic star.entries --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic star.claims --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "